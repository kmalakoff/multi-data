{"version":3,"file":"multi-data.js","sources":["../../src/index.ts"],"sourcesContent":["export interface HeadersObject {\n  [key: string]: string;\n}\n\nexport interface Options {\n  headers?: HeadersObject;\n}\n\n/**\n * Class to build and concatenate multipart form data\n */\nexport default class MultiData {\n  readonly boundary: string;\n  protected lines: string[] = [];\n\n  /**\n   * @param boundary The string used to define multipart boundaries and the end of body.\n   */\n  constructor(boundary: string) {\n    if (boundary === undefined) throw new TypeError('boundary expected');\n    this.boundary = boundary;\n  }\n\n  /**\n   * Append a part to the multipart form data.\n   *\n   * @param name The part name.\n   * @param data The part data.\n   * @param options Pass headers in the options for custom part headers.\n   */\n  append(name: string, data: string, options?: Options): MultiData {\n    if (name === undefined) throw new TypeError('name expected');\n    if (data === undefined) throw new TypeError('data expected');\n\n    this.lines.push(`--${this.boundary}`);\n    this.lines.push(`Content-Disposition: form-data; name=\"${name}\"`);\n    if (options && options.headers) {\n      const headers = options.headers;\n      for (const key in headers) this.lines.push(`${key}: ${headers[key]}`);\n    }\n    this.lines.push('');\n    this.lines.push(data);\n    return this;\n  }\n\n  /**\n   * After appending data, use toString() to concatenate the form data for your request.\n   */\n  toString(): string {\n    this.lines.push(`--${this.boundary}--`);\n    const string = this.lines.join('\\r\\n');\n    this.lines.pop();\n    return string;\n  }\n}\n"],"names":["MultiData","boundary","lines","undefined","TypeError","append","name","data","options","push","headers","key","toString","string","join","pop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,MAAMA,0BAAD,WAAL;EAAMA,IAAAA,SAAAA,SAAAA,CAOPC,QAAgB,EAAA;EAPTD,QAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,CAAAA;EACnB,QAAA,gBAAA,CAAA,IAAA,EAASC,YAAT,KAAA,CAAA,CAAA,CAAA;EACA,QAAA,gBAAA,CAAA,IAAA,EAAUC,SAAkB,EAAE,CAAA,CAAA;EAM5B,QAAA,IAAID,QAAaE,KAAAA,SAAAA,EAAW,MAAM,IAAIC,SAAU,CAAA,mBAAA,CAAA,CAAA;UAChD,IAAI,CAACH,QAAQ,GAAGA,QAAAA,CAAAA;;EATCD,IAAAA,aAAAA,CAAAA,SAAAA,EAAAA;;EAYnB;;;;;;EAMC,MACDK,GAAAA,EAAAA,QAAAA;EAAAA,YAAAA,KAAAA,EAAAA,SAAAA,MAAOC,CAAAA,IAAY,EAAEC,IAAY,EAAEC,OAAiB,EAAA;EAClD,gBAAA,IAAIF,IAASH,KAAAA,SAAAA,EAAW,MAAM,IAAIC,SAAU,CAAA,eAAA,CAAA,CAAA;EAC5C,gBAAA,IAAIG,IAASJ,KAAAA,SAAAA,EAAW,MAAM,IAAIC,SAAU,CAAA,eAAA,CAAA,CAAA;kBAE5C,IAAI,CAACF,KAAK,CAACO,IAAI,CAAC,IAAmB,CAAA,MAAA,CAAd,IAAI,CAACR,QAAQ,CAAA,CAAA,CAAA;kBAClC,IAAI,CAACC,KAAK,CAACO,IAAI,CAAC,wCAAC,CAA6C,OAALH,IAAK,EAAA,GAAA,CAAA,CAAA,CAAA;kBAC9D,IAAIE,OAAAA,IAAWA,OAAQE,CAAAA,OAAO,EAAE;sBAC9B,IAAMA,OAAAA,GAAUF,QAAQE,OAAO,CAAA;EAC/B,oBAAA,IAAK,IAAMC,GAAOD,IAAAA,OAAAA,CAAS,IAAI,CAACR,KAAK,CAACO,IAAI,CAAE,GAAUC,MAARC,CAAAA,GAAAA,EAAI,MAAiB,MAAbD,CAAAA,OAAO,CAACC,GAAI,CAAA,CAAA,CAAA,CAAA;EACpE,iBAAA;EACA,gBAAA,IAAI,CAACT,KAAK,CAACO,IAAI,CAAC,EAAA,CAAA,CAAA;EAChB,gBAAA,IAAI,CAACP,KAAK,CAACO,IAAI,CAACF,IAAAA,CAAAA,CAAAA;EAChB,gBAAA,OAAO,IAAI,CAAA;EACb,aAAA;;;EAEA;;EAEC,MACDK,GAAAA,EAAAA,UAAAA;qBAAAA,SAAAA,QAAAA,GAAAA;kBACE,IAAI,CAACV,KAAK,CAACO,IAAI,CAAC,IAAC,CAAkB,MAAd,CAAA,IAAI,CAACR,QAAQ,EAAC,IAAA,CAAA,CAAA,CAAA;EACnC,gBAAA,IAAMY,SAAS,IAAI,CAACX,KAAK,CAACY,IAAI,CAAC,MAAA,CAAA,CAAA;kBAC/B,IAAI,CAACZ,KAAK,CAACa,GAAG,EAAA,CAAA;kBACd,OAAOF,MAAAA,CAAAA;EACT,aAAA;;;EA1CmBb,IAAAA,OAAAA,SAAAA,CAAAA;;;;;;;;;"}