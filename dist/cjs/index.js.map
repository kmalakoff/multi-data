{"version":3,"sources":["../../src/index.ts"],"names":["MultiData","boundary","undefined","TypeError","name","data","options","lines","push","headers","key","string","join","pop"],"mappings":";;;;;;;;;;;;;;;AAQA;AACA;AACA;IACqBA,S;AAInB;AACF;AACA;AACE,qBAAYC,QAAZ,EAA8B;AAAA;;AAAA;;AAAA,mCALF,EAKE;;AAC5B,QAAIA,QAAQ,KAAKC,SAAjB,EAA4B,MAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;AAC5B,SAAKF,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,gBAAOG,IAAP,EAAqBC,IAArB,EAAmCC,OAAnC,EAAiE;AAC/D,UAAIF,IAAI,KAAKF,SAAb,EAAwB,MAAM,IAAIC,SAAJ,CAAc,eAAd,CAAN;AACxB,UAAIE,IAAI,KAAKH,SAAb,EAAwB,MAAM,IAAIC,SAAJ,CAAc,eAAd,CAAN;AAExB,WAAKI,KAAL,CAAWC,IAAX,aAAqB,KAAKP,QAA1B;AACA,WAAKM,KAAL,CAAWC,IAAX,kDAAyDJ,IAAzD;;AACA,UAAIE,OAAO,IAAIA,OAAO,CAACG,OAAvB,EAAgC;AAC9B,YAAMA,OAAO,GAAGH,OAAO,CAACG,OAAxB;;AACA,aAAK,IAAMC,IAAX,IAAkBD,OAAlB;AAA2B,eAAKF,KAAL,CAAWC,IAAX,WAAmBE,IAAnB,eAA2BD,OAAO,CAACC,IAAD,CAAlC;AAA3B;AACD;;AACD,WAAKH,KAAL,CAAWC,IAAX,CAAgB,EAAhB;AACA,WAAKD,KAAL,CAAWC,IAAX,CAAgBH,IAAhB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;;;;WACE,oBAAmB;AACjB,WAAKE,KAAL,CAAWC,IAAX,aAAqB,KAAKP,QAA1B;AACA,UAAMU,MAAM,GAAG,KAAKJ,KAAL,CAAWK,IAAX,CAAgB,MAAhB,CAAf;AACA,WAAKL,KAAL,CAAWM,GAAX;AACA,aAAOF,MAAP;AACD","sourcesContent":["export interface HeadersObject {\n  [key: string]: string;\n}\n\nexport interface Options {\n  headers?: HeadersObject;\n}\n\n/**\n * Class to build and concatenate multipart form data\n */\nexport default class MultiData {\n  readonly boundary: string;\n  protected lines: string[] = [];\n\n  /**\n   * @param boundary The string used to define multipart boundaries and the end of body.\n   */\n  constructor(boundary: string) {\n    if (boundary === undefined) throw new TypeError(\"boundary expected\");\n    this.boundary = boundary;\n  }\n\n  /**\n   * Append a part to the multipart form data.\n   *\n   * @param name The part name.\n   * @param data The part data.\n   * @param options Pass headers in the options for custom part headers.\n   */\n  append(name: string, data: string, options?: Options): MultiData {\n    if (name === undefined) throw new TypeError(\"name expected\");\n    if (data === undefined) throw new TypeError(\"data expected\");\n\n    this.lines.push(`--${this.boundary}`);\n    this.lines.push(`Content-Disposition: form-data; name=\"${name}\"`);\n    if (options && options.headers) {\n      const headers = options.headers;\n      for (const key in headers) this.lines.push(`${key}: ${headers[key]}`);\n    }\n    this.lines.push(\"\");\n    this.lines.push(data);\n    return this;\n  }\n\n  /**\n   * After appending data, use toString() to concatenate the form data for your request.\n   */\n  toString(): string {\n    this.lines.push(`--${this.boundary}--`);\n    const string = this.lines.join(\"\\r\\n\");\n    this.lines.pop();\n    return string;\n  }\n}\n"],"file":"index.js"}